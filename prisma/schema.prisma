// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// --------------------------------------
// AUTH & USERS
// --------------------------------------

model User {
  id                String    @id @default(cuid())
  fullName          String
  email             String    @unique
  phoneNumber       String    @unique
  password          String
  status            String
  roleId            String
  role              Role      @relation(fields: [roleId], references: [id])
  financingPartnerId String?
  financingPartner  FinancingPartner? @relation(fields: [financingPartnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String // JSON string for permissions
  users       User[]
}

// --------------------------------------
// BNPL MANAGEMENT
// --------------------------------------

model FinancingPartner {
  id                          String                        @id @default(cuid())
  name                        String                        @unique
  icon                        String                        @db.Text
  colorHex                    String
  displayOrder                Int
  accountNumber               String?
  startingCapital             Float
  initialBalance              Float
  allowCrossProviderLoans     Boolean                       @default(false)
  nplThresholdDays            Int                           @default(60)
  paymentPlanProducts         PaymentPlanProduct[]
  scoringParameters           ScoringParameter[]
  scoringHistory              ScoringConfigurationHistory[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  users                       User[]
  ledgerAccounts              LedgerAccount[]
  journalEntries              JournalEntry[]
  termsAndConditions          TermsAndConditions[]
}

model Merchant {
  id            String  @id @default(cuid())
  name          String
  businessType  String
  contactInfo   String
  bankAccount   String
  status        String  @default("Pending") // Pending, Active, Inactive
  orders        Order[]
}

model Order {
  id                 String           @id @default(cuid())
  merchantId         String
  merchant           Merchant         @relation(fields: [merchantId], references: [id])
  customerId         String
  customer           Customer         @relation(fields: [customerId], references: [id])
  orderAmount        Float
  orderDate          DateTime         @default(now())
  status             String           // e.g., 'Completed', 'Refunded'
  installmentPlanId  String?          @unique
  installmentPlan    InstallmentPlan? @relation(fields: [installmentPlanId], references: [id])
  financingRequestId String?          @unique
  financingRequest   FinancingRequest?
}

model PaymentPlanProduct {
  id                          String                        @id @default(cuid())
  providerId                  String
  provider                    FinancingPartner              @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  name                        String
  description                 String
  icon                        String                        @db.Text
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String // Active, Disabled
  allowConcurrentLoans        Boolean                       @default(false)
  serviceFee                  String // JSON FeeRule
  serviceFeeEnabled           Boolean?
  dailyFee                    String // JSON FeeRule
  dailyFeeEnabled             Boolean?
  penaltyRules                String // JSON array of PenaltyRule
  penaltyRulesEnabled         Boolean?
  dataProvisioningEnabled     Boolean?
  eligibilityFilter           String?                       @db.Text // JSON object for filtering borrowers
  eligibilityUploadId         String?
  eligibilityUpload           DataProvisioningUpload?       @relation(fields: [eligibilityUploadId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  installmentPlans            InstallmentPlan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfiguration        ScoringConfigurationProduct[]
  financingRequests           FinancingRequest[]
  requiredDocuments           RequiredDocument[]

  @@unique([name, providerId])
}

model InstallmentPlan {
  id                   String           @id @default(cuid())
  customerId           String
  customer             Customer         @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  paymentPlanProductId String
  paymentPlanProduct   PaymentPlanProduct @relation(fields: [paymentPlanProductId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  financingRequestId   String           @unique
  financingRequest     FinancingRequest @relation(fields: [financingRequestId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  order                Order?
  loanAmount           Float
  serviceFee           Float
  penaltyAmount        Float
  disbursedDate        DateTime
  dueDate              DateTime
  repaymentStatus      String // Paid, Unpaid
  repaymentBehavior    String? // ON_TIME, LATE, EARLY
  repaidAmount         Float?
  payments             Payment[]
  journalEntries       JournalEntry[]
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
}

model Payment {
  id                                String          @id @default(cuid())
  installmentPlanId                 String
  installmentPlan                   InstallmentPlan @relation(fields: [installmentPlanId], references: [id])
  amount                            Float
  date                              DateTime
  outstandingBalanceBeforePayment Float?
  journalEntryId                    String?         @unique
  journalEntry                      JournalEntry?   @relation(fields: [journalEntryId], references: [id], onUpdate: NoAction, onDelete: NoAction)
}

model Customer {
  id                String             @id
  status            String             @default("Active") // Active, NPL
  provisionedData   ProvisionedData[]
  installmentPlans  InstallmentPlan[]
  agreements        CustomerAgreement[]
  financingRequests FinancingRequest[]
  orders            Order[]
}

// --------------------------------------
// FINANCING APPLICATION & DOCUMENTS
// --------------------------------------

model FinancingRequest {
  id                   String             @id @default(cuid())
  customerId           String
  customer             Customer           @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  paymentPlanProductId String
  paymentPlanProduct   PaymentPlanProduct @relation(fields: [paymentPlanProductId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  loanAmount           Float?
  status               String             @default("PENDING_DOCUMENTS") // PENDING_DOCUMENTS, PENDING_REVIEW, NEEDS_REVISION, APPROVED, DISBURSED
  rejectionReason      String?            @db.Text
  installmentPlan      InstallmentPlan?
  order                Order?             @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orderId              String?            @unique
  uploadedDocuments    UploadedDocument[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model RequiredDocument {
  id                String             @id @default(cuid())
  productId         String
  product           PaymentPlanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  name              String
  description       String?
  uploadedDocuments UploadedDocument[]
}

model UploadedDocument {
  id                 String           @id @default(cuid())
  financingRequestId String
  application        FinancingRequest @relation(fields: [financingRequestId], references: [id], onDelete: Cascade)
  requiredDocumentId String
  requiredDocument   RequiredDocument @relation(fields: [requiredDocumentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fileName           String
  fileType           String
  fileContent        String           @db.Text // Should be a URL in production, Base64 for simplicity
  status             String           @default("PENDING") // PENDING, APPROVED, REJECTED
  reviewedBy         String?
  reviewedAt         DateTime?

  @@unique([financingRequestId, requiredDocumentId])
}


// --------------------------------------
// DATA & SCORING
// --------------------------------------

model DataProvisioningConfig {
  id              String                   @id @default(cuid())
  providerId      String
  provider        FinancingPartner         @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name            String
  columns         String                   @db.NVarChar(Max) // JSON array of DataColumn
  uploads         DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
  id                String             @id @default(cuid())
  configId          String
  config            DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  fileName          String
  rowCount          Int
  uploadedBy        String
  uploadedAt        DateTime           @default(now())
  provisionedData   ProvisionedData[]
  paymentPlanProduct PaymentPlanProduct[]
}

model ProvisionedData {
  id        String                 @id @default(cuid())
  customerId String
  customer  Customer               @relation(fields: [customerId], references: [id], onDelete: Cascade)
  configId  String
  config    DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  uploadId  String?
  upload    DataProvisioningUpload? @relation(fields: [uploadId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  data      String                 // JSON string of the uploaded data for this borrower
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  @@unique([customerId, configId])
}


model ScoringParameter {
  id         String           @id @default(cuid())
  providerId String
  provider   FinancingPartner @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name       String
  weight     Int
  rules      Rule[]
}

model Rule {
  id          String           @id @default(cuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
}

model LoanAmountTier {
  id        String             @id @default(cuid())
  productId String
  product   PaymentPlanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  fromScore Int
  toScore   Int
  loanAmount Float
}


model ScoringConfigurationHistory {
  id              String                        @id @default(cuid())
  providerId      String
  provider        FinancingPartner              @relation(fields: [providerId], references: [id], onDelete: Cascade)
  parameters      String                        @db.NVarChar(Max) // JSON string of ScoringParameter[]
  savedAt         DateTime                      @default(now())
  appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
  id        String                      @id @default(cuid())
  configId  String
  config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
  productId String
  product   PaymentPlanProduct          @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assignedAt DateTime                   @default(now())
  assignedBy String

  @@unique([configId, productId])
}

// --------------------------------------
// ACCOUNTING
// --------------------------------------

model LedgerAccount {
  id         String         @id @default(cuid())
  providerId String
  provider   FinancingPartner @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name       String
  type       String // Receivable, Received, Income
  category   String // Principal, Interest, ServiceFee, Penalty, Tax
  balance    Float          @default(0)
  entries    LedgerEntry[]

  @@unique([providerId, name])
}

model JournalEntry {
  id              String           @id @default(cuid())
  providerId      String
  provider        FinancingPartner @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  installmentPlanId String?
  installmentPlan InstallmentPlan? @relation(fields: [installmentPlanId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  date            DateTime
  description     String
  entries         LedgerEntry[]
  payment         Payment?
}

model LedgerEntry {
  id              String        @id @default(cuid())
  journalEntryId  String
  journalEntry    JournalEntry  @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  ledgerAccountId String
  ledgerAccount   LedgerAccount @relation(fields: [ledgerAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  type            String // Debit or Credit
  amount          Float
}

// --------------------------------------
// AGREEMENTS
// --------------------------------------

model TermsAndConditions {
  id         String              @id @default(cuid())
  providerId String
  provider   FinancingPartner    @relation(fields: [providerId], references: [id], onDelete: Cascade)
  content    String              @db.Text
  version    Int
  isActive   Boolean             @default(false)
  publishedAt DateTime
  agreements CustomerAgreement[]

  @@unique([providerId, version])
}

model CustomerAgreement {
  id         String             @id @default(cuid())
  customerId String
  customer   Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  termsId    String
  terms      TermsAndConditions @relation(fields: [termsId], references: [id], onDelete: Cascade)
  acceptedAt DateTime           @default(now())

  @@unique([customerId, termsId])
}

// --------------------------------------
// TAX
// --------------------------------------

model Tax {
  id        String  @id @default(cuid())
  name      String?
  rate      Float   @default(0)
  appliedTo String // JSON string: e.g., ["serviceFee", "interest", "penalty"]
}


// --------------------------------------
// AUDITING
// --------------------------------------

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String
  action    String
  entity    String?
  entityId  String?
  details   String?  @db.Text
  ipAddress String?
  userAgent String?  @db.Text
  createdAt DateTime @default(now())

  @@index([actorId])
  @@index([action])
  @@index([entity, entityId])
}
