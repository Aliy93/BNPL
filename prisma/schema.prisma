// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  fullName        String
  email           String         @unique
  phoneNumber     String         @unique
  password        String
  roleId          String
  loanProviderId  String?
  status          String // Active, Inactive
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  role            Role           @relation(fields: [roleId], references: [id])
  loanProvider    LoanProvider?  @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String // JSON string for permissions
  users       User[]
}

model LoanProvider {
  id                      String                    @id @default(cuid())
  name                    String                    @unique
  icon                    String
  colorHex                String?
  displayOrder            Int                       @default(0)
  accountNumber           String?
  startingCapital         Float
  initialBalance          Float
  allowCrossProviderLoans Boolean                   @default(false)
  nplThresholdDays        Int                       @default(90)
  products                LoanProduct[]
  users                   User[]
  scoringParameters       ScoringParameter[]
  scoringHistory          ScoringConfigurationHistory[]
  dataProvisioningConfigs DataProvisioningConfig[]
  termsAndConditions      TermsAndConditions[]
  journalEntries          JournalEntry[]
  ledgerAccounts          LedgerAccount[]
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  providerId                  String
  name                        String
  description                 String
  icon                        String
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String // Active, Disabled
  allowConcurrentLoans        Boolean                       @default(false)
  serviceFeeEnabled           Boolean?
  serviceFee                  String? // JSON for { type: 'fixed' | 'percentage', value: number }
  dailyFeeEnabled             Boolean?
  dailyFee                    String? // JSON for { type: 'fixed' | 'percentage', value: number, calculationBase: 'principal' | 'compound' }
  penaltyRulesEnabled         Boolean?
  penaltyRules                String? // JSON for array of PenaltyRule
  dataProvisioningEnabled     Boolean?
  eligibilityFilter           String?                       @db.NVarChar(Max)
  dataProvisioningConfigId    String?
  eligibilityUploadId         String?                       @unique
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  loans                       Loan[]
  loanApplications            LoanApplication[]
  requiredDocuments           RequiredDocument[]
  scoringConfigurations       ScoringConfigurationProduct[]
  loanAmountTiers             LoanAmountTier[]
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  eligibilityUpload           DataProvisioningUpload?       @relation(fields: [eligibilityUploadId], references: [id], onDelete: SetNull)
}

model Loan {
  id                String          @id @default(cuid())
  borrowerId        String
  productId         String
  loanApplicationId String          @unique
  loanAmount        Float
  serviceFee        Float           @default(0)
  penaltyAmount     Float
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String // Paid, Unpaid
  repaidAmount      Float?
  repaymentBehavior String? // ON_TIME, LATE, EARLY
  product           LoanProduct     @relation(fields: [productId], references: [id])
  borrower          Borrower        @relation(fields: [borrowerId], references: [id])
  payments          Payment[]
  journalEntries    JournalEntry[]
  loanApplication   LoanApplication @relation(fields: [loanApplicationId], references: [id])
  order             Order?
}

model Payment {
  id                              String        @id @default(cuid())
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
  journalEntryId                  String?       @unique
  loan                            Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  journalEntry                    JournalEntry? @relation(fields: [journalEntryId], references: [id])
}

model ScoringParameter {
  id         String @id @default(cuid())
  providerId String
  name       String
  weight     Int
  rules      Rule[]
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model Rule {
  id          String           @id @default(cuid())
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

model LoanAmountTier {
  id        String      @id @default(cuid())
  productId String
  fromScore Int
  toScore   Int
  loanAmount Float
  product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Borrower {
  id              String                 @id @default(cuid())
  status          String? // NPL
  provisionedData ProvisionedData[]
  loans           Loan[]
  loanApplications LoanApplication[]
  agreements    BorrowerAgreement[]
  orders          Order[]
}

model ProvisionedData {
  id        String                  @id @default(cuid())
  borrowerId String
  configId  String
  uploadId  String?
  data      String                  @db.NVarChar(Max)
  createdAt DateTime                @default(now())
  borrower  Borrower                @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  config    DataProvisioningConfig  @relation(fields: [configId], references: [id])
  upload    DataProvisioningUpload? @relation(fields: [uploadId], references: [id], onDelete: SetNull)

  @@unique([borrowerId, configId])
}

model DataProvisioningConfig {
    id String @id @default(cuid())
    providerId String
    name String
    columns String @db.NVarChar(Max) // JSON array of { id, name, type, isIdentifier }
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    provisionedData ProvisionedData[]
    uploads DataProvisioningUpload[]
    products        LoanProduct[]
}

model DataProvisioningUpload {
    id String @id @default(cuid())
    configId String
    fileName String
    rowCount Int
    uploadedAt DateTime @default(now())
    uploadedBy String
    config DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    provisionedData ProvisionedData[]
    productFilterFor LoanProduct?
}

model ScoringConfigurationHistory {
  id              String                        @id @default(cuid())
  providerId      String
  savedAt         DateTime                      @default(now())
  parameters      String                        @db.NVarChar(Max) // JSON string
  provider        LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
  configId  String
  productId String
  assignedAt DateTime @default(now())
  assignedBy String
  config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
  product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([configId, productId])
}

model LedgerAccount {
    id String @id @default(cuid())
    providerId String
    name String
    type String // Receivable, Received, Income
    category String // Principal, Interest, Penalty, ServiceFee
    balance Float @default(0)
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    entries LedgerEntry[]
}

model JournalEntry {
    id String @id @default(cuid())
    providerId String
    loanId String?
    date DateTime
    description String
    provider LoanProvider @relation(fields: [providerId], references: [id])
    loan Loan? @relation(fields: [loanId], references: [id], onDelete: SetNull)
    entries LedgerEntry[]
    Payment Payment?
}

model LedgerEntry {
    id String @id @default(cuid())
    journalEntryId String
    ledgerAccountId String
    type String // Debit, Credit
    amount Float
    journalEntry JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
    ledgerAccount LedgerAccount @relation(fields: [ledgerAccountId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String
  action    String
  entity    String?
  entityId  String?
  details   String?  @db.NVarChar(Max)
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?
}

model LoanApplication {
  id        String   @id @default(cuid())
  borrowerId String
  productId String
  loanAmount Float?
  status String // PENDING_DOCUMENTS, PENDING_REVIEW, APPROVED, REJECTED, DISBURSED
  rejectionReason String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  borrower          Borrower           @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  product           LoanProduct        @relation(fields: [productId], references: [id])
  loan              Loan?
  uploadedDocuments UploadedDocument[]
}

model RequiredDocument {
    id String @id @default(cuid())
    productId String
    name String
    description String?
    product LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    uploadedDocuments UploadedDocument[]
}

model UploadedDocument {
    id String @id @default(cuid())
    loanApplicationId String
    requiredDocumentId String
    fileName String
    fileType String
    fileContent String @db.NVarChar(Max)
    status String @default("PENDING") // PENDING, APPROVED, REJECTED
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    application      LoanApplication @relation(fields: [loanApplicationId], references: [id], onDelete: Cascade)
    requiredDocument RequiredDocument @relation(fields: [requiredDocumentId], references: [id])
    
    @@unique([loanApplicationId, requiredDocumentId])
}

model TermsAndConditions {
    id String @id @default(cuid())
    providerId String
    content String @db.NVarChar(Max)
    version Int
    isActive Boolean @default(true)
    publishedAt DateTime @default(now())
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    agreements BorrowerAgreement[]

    @@unique([providerId, version])
}

model BorrowerAgreement {
    id String @id @default(cuid())
    borrowerId String
    termsId String
    acceptedAt DateTime @default(now())
    borrower Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    terms TermsAndConditions @relation(fields: [termsId], references: [id], onDelete: Cascade)

    @@unique([borrowerId, termsId])
}

model Tax {
    id String @id @default(cuid())
    name String?
    rate Float @default(0)
    appliedTo String // JSON array of 'serviceFee', 'interest', 'penalty'
}

model Merchant {
  id           String @id @default(cuid())
  name         String
  businessType String
  contactInfo  String
  bankAccount  String
  status       String // Active, Pending, Inactive
  orders       Order[]
}

model Order {
  id                String  @id @default(cuid())
  merchantId        String
  customerId        String
  orderItems        String // JSON string of items
  totalAmount       Float
  installmentPlanId String? @unique
  status            String // e.g., 'Completed', 'Refunded'

  merchant          Merchant @relation(fields: [merchantId], references: [id])
  customer          Borrower @relation(fields: [customerId], references: [id])
  installmentPlan   Loan?    @relation(fields: [installmentPlanId], references: [id], onUpdate: NoAction, onDelete: NoAction)
}
