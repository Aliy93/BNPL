// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String        @id @default(cuid())
  fullName        String
  email           String        @unique
  phoneNumber     String        @unique
  password        String
  status          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  roleId          String
  role            Role          @relation(fields: [roleId], references: [id])
  loanProviderId  String?
  loanProvider    LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String
  users       User[]
}

model LoanProvider {
  id                      String                    @id @default(cuid())
  name                    String                    @unique
  icon                    String
  colorHex                String?
  displayOrder            Int                       @default(0)
  accountNumber           String?
  startingCapital         Float                     @default(0)
  initialBalance          Float                     @default(0)
  allowCrossProviderLoans Boolean                   @default(false)
  nplThresholdDays        Int                       @default(60)
  products                LoanProduct[]
  users                   User[]
  scoringParameters       ScoringParameter[]
  dataProvisioningConfigs DataProvisioningConfig[]
  journalEntries          JournalEntry[]
  ledgerAccounts          LedgerAccount[]
  termsAndConditions      TermsAndConditions[]
  merchants               Merchant[]
}

model LoanProduct {
  id                        String                         @id @default(cuid())
  providerId                String
  provider                  LoanProvider                   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name                      String
  description               String?
  icon                      String
  minLoan                   Float
  maxLoan                   Float
  duration                  Int
  status                    String
  allowConcurrentLoans      Boolean                        @default(false)
  // Fee and Penalty rules are stored as JSON strings
  serviceFee                String?
  dailyFee                  String?
  penaltyRules              String?
  serviceFeeEnabled         Boolean?
  dailyFeeEnabled           Boolean?
  penaltyRulesEnabled       Boolean?
  // New fields for data provisioning based eligibility
  dataProvisioningEnabled   Boolean?                       @default(false)
  dataProvisioningConfigId  String?
  eligibilityFilter         String?
  eligibilityUploadId       String?                        @unique
  eligibilityUpload         DataProvisioningUpload?        @relation(fields: [eligibilityUploadId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  loans                     Loan[]
  loanApplications          LoanApplication[]
  loanAmountTiers           LoanAmountTier[]
  scoringConfigurations     ScoringConfigurationProduct[]
  requiredDocuments         RequiredDocument[]
}

model Loan {
  id                String          @id @default(cuid())
  borrowerId        String
  borrower          Borrower        @relation(fields: [borrowerId], references: [id])
  productId         String
  product           LoanProduct     @relation(fields: [productId], references: [id])
  loanApplicationId String?         @unique
  loanApplication   LoanApplication? @relation(fields: [loanApplicationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  loanAmount        Float
  serviceFee        Float
  penaltyAmount     Float
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String
  repaidAmount      Float?          @default(0)
  payments          Payment[]
  journalEntries    JournalEntry[]
  order             Order?
  repaymentBehavior String?
}

model Borrower {
  id              String            @id @default(cuid())
  status          String            @default("Active") // e.g., Active, NPL, Blocked
  loans           Loan[]
  loanApplications LoanApplication[]
  provisionedData ProvisionedData[]
  agreements      BorrowerAgreement[]
  orders          Order[]
}

model Payment {
  id                              String       @id @default(cuid())
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
  journalEntryId                  String?      @unique
  loan                            Loan         @relation(fields: [loanId], references: [id], onDelete: Cascade)
  journalEntry                    JournalEntry? @relation(fields: [journalEntryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ScoringParameter {
  id          String  @id @default(cuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  weight      Int
  rules       Rule[]
}

model Rule {
  id          String           @id @default(cuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
}

model LoanAmountTier {
  id        String      @id @default(cuid())
  productId String
  product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  fromScore Int
  toScore   Int
  loanAmount Float
}

model DataProvisioningConfig {
  id           String                   @id @default(cuid())
  providerId   String
  provider     LoanProvider             @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name         String
  columns      String // JSON string representing the column definitions
  uploads      DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
  id              String            @id @default(cuid())
  configId        String
  config          DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  fileName        String
  rowCount        Int
  uploadedAt      DateTime          @default(now())
  uploadedBy      String
  provisionedData ProvisionedData[]
  LoanProduct     LoanProduct?
}

model ProvisionedData {
  id         String                 @id @default(cuid())
  borrowerId String
  borrower   Borrower               @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  configId   String
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  uploadId   String?
  upload     DataProvisioningUpload? @relation(fields: [uploadId], references: [id], onDelete: SetNull)
  data       String // JSON blob of the row data
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  @@unique([borrowerId, configId])
}

model AuditLog {
  id          String   @id @default(cuid())
  actorId     String
  action      String
  entity      String?
  entityId    String?
  details     String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
}

model JournalEntry {
    id             String @id @default(cuid())
    providerId     String
    loanId         String?
    date           DateTime
    description    String
    provider       LoanProvider @relation(fields: [providerId], references: [id], onUpdate: NoAction)
    loan           Loan? @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    entries        LedgerEntry[]
    Payment        Payment?
}

model LedgerAccount {
    id              String @id @default(cuid())
    providerId      String
    provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name            String
    type            String // Receivable, Received, Income
    category        String // Principal, Interest, Penalty, ServiceFee, Tax
    balance         Float @default(0)
    entries         LedgerEntry[]
}

model LedgerEntry {
    id              String @id @default(cuid())
    journalEntryId  String
    ledgerAccountId String
    type            String // Debit or Credit
    amount          Float
    journalEntry    JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
    ledgerAccount   LedgerAccount @relation(fields: [ledgerAccountId], references: [id], onUpdate: NoAction)
}

model LoanApplication {
    id              String @id @default(cuid())
    borrowerId      String
    borrower        Borrower @relation(fields: [borrowerId], references: [id])
    productId       String
    product         LoanProduct @relation(fields: [productId], references: [id])
    loanAmount      Float?
    status          String // PENDING_REVIEW, APPROVED, REJECTED, DISBURSED
    rejectionReason String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    loan            Loan?
    uploadedDocuments UploadedDocument[]
}

// These models are for history tracking and are not meant to be relational in the same way.
model ScoringConfigurationHistory {
    id String @id @default(cuid())
    providerId String
    savedAt DateTime @default(now())
    parameters String // JSON string of ScoringParameter[]
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id String @id @default(cuid())
    configId String
    productId String
    assignedBy String // userId
    assignedAt DateTime @default(now())
    config ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    product LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([configId, productId])
}

model RequiredDocument {
    id String @id @default(cuid())
    productId String
    product LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    name String
    description String?
    uploadedDocuments UploadedDocument[]
}

model UploadedDocument {
    id String @id @default(cuid())
    loanApplicationId String
    requiredDocumentId String
    fileName String
    fileType String
    fileContent String // In a real app, this would be a URL to a storage bucket
    status String @default("PENDING") // PENDING, APPROVED, REJECTED
    reviewedBy String?
    reviewedAt DateTime?

    application         LoanApplication @relation(fields: [loanApplicationId], references: [id], onDelete: Cascade)  
    requiredDocument    RequiredDocument @relation(fields: [requiredDocumentId], references: [id], onDelete: Cascade)

    @@unique([loanApplicationId, requiredDocumentId])
}

model TermsAndConditions {
  id          String       @id @default(cuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  content     String
  version     Int
  isActive    Boolean      @default(false)
  publishedAt DateTime     @default(now())
  agreements  BorrowerAgreement[]

  @@unique([providerId, version])
}

model BorrowerAgreement {
  id          String       @id @default(cuid())
  borrowerId  String
  borrower    Borrower     @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  termsId     String
  terms       TermsAndConditions @relation(fields: [termsId], references: [id], onDelete: Cascade)
  acceptedAt  DateTime     @default(now())

  @@unique([borrowerId, termsId])
}

model Merchant {
  id            String   @id @default(cuid())
  name          String
  businessType  String
  contactInfo   String
  status        String   @default("Active")
  providerId    String
  provider      LoanProvider @relation(fields: [providerId], references: [id])
  orders        Order[]
}

model Order {
  id                String   @id @default(cuid())
  merchantId        String
  customerId        String
  orderItems        String // JSON string of items
  totalAmount       Float
  status            String
  createdAt         DateTime @default(now())
  merchant          Merchant @relation(fields: [merchantId], references: [id])
  customer          Borrower @relation(fields: [customerId], references: [id])
  installmentPlanId String?  @unique
  installmentPlan   Loan?    @relation(fields: [installmentPlanId], references: [id])
}

model Tax {
    id          String @id @default(cuid())
    name        String?
    rate        Float @default(0)
    appliedTo   String @default("[]") // JSON array: ['serviceFee', 'interest', 'penalty']
}
